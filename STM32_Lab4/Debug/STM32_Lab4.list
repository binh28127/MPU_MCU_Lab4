
STM32_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd8  08002bd8  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd8  08002bd8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000044  08002c24  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08002c24  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097ea  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8d  00000000  00000000  00029857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017155  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9a0  00000000  00000000  00043acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008227a  00000000  00000000  0005046d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d26e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a2c  00000000  00000000  000d273c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba0 	.word	0x08002ba0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002ba0 	.word	0x08002ba0

0800014c <display7SEG>:
int h_count_down = 0;
int v_count_down = 0;
int hState = AUTO_INIT;
int vState = AUTO_INIT;

void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	d87f      	bhi.n	800025a <display7SEG+0x10e>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <display7SEG+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000189 	.word	0x08000189
 8000164:	0800019f 	.word	0x0800019f
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001cb 	.word	0x080001cb
 8000170:	080001e1 	.word	0x080001e1
 8000174:	080001f7 	.word	0x080001f7
 8000178:	0800020d 	.word	0x0800020d
 800017c:	08000223 	.word	0x08000223
 8000180:	08000239 	.word	0x08000239
 8000184:	08000245 	.word	0x08000245
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOB, 0B0111111, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	213f      	movs	r1, #63	; 0x3f
 800018c:	4838      	ldr	r0, [pc, #224]	; (8000270 <display7SEG+0x124>)
 800018e:	f001 fcf6 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B1000000, GPIO_PIN_SET);
 8000192:	2201      	movs	r2, #1
 8000194:	2140      	movs	r1, #64	; 0x40
 8000196:	4836      	ldr	r0, [pc, #216]	; (8000270 <display7SEG+0x124>)
 8000198:	f001 fcf1 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 800019c:	e063      	b.n	8000266 <display7SEG+0x11a>
		case 1:
			HAL_GPIO_WritePin(GPIOB, 0B0000110, GPIO_PIN_RESET);
 800019e:	2200      	movs	r2, #0
 80001a0:	2106      	movs	r1, #6
 80001a2:	4833      	ldr	r0, [pc, #204]	; (8000270 <display7SEG+0x124>)
 80001a4:	f001 fceb 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B1111001, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2179      	movs	r1, #121	; 0x79
 80001ac:	4830      	ldr	r0, [pc, #192]	; (8000270 <display7SEG+0x124>)
 80001ae:	f001 fce6 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 80001b2:	e058      	b.n	8000266 <display7SEG+0x11a>
		case 2:
			HAL_GPIO_WritePin(GPIOB, 0B1011011, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	215b      	movs	r1, #91	; 0x5b
 80001b8:	482d      	ldr	r0, [pc, #180]	; (8000270 <display7SEG+0x124>)
 80001ba:	f001 fce0 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0100100, GPIO_PIN_SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	2124      	movs	r1, #36	; 0x24
 80001c2:	482b      	ldr	r0, [pc, #172]	; (8000270 <display7SEG+0x124>)
 80001c4:	f001 fcdb 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 80001c8:	e04d      	b.n	8000266 <display7SEG+0x11a>
		case 3:
			HAL_GPIO_WritePin(GPIOB, 0B1001111, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	214f      	movs	r1, #79	; 0x4f
 80001ce:	4828      	ldr	r0, [pc, #160]	; (8000270 <display7SEG+0x124>)
 80001d0:	f001 fcd5 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0110000, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2130      	movs	r1, #48	; 0x30
 80001d8:	4825      	ldr	r0, [pc, #148]	; (8000270 <display7SEG+0x124>)
 80001da:	f001 fcd0 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 80001de:	e042      	b.n	8000266 <display7SEG+0x11a>
		case 4:
			HAL_GPIO_WritePin(GPIOB, 0B1100110, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2166      	movs	r1, #102	; 0x66
 80001e4:	4822      	ldr	r0, [pc, #136]	; (8000270 <display7SEG+0x124>)
 80001e6:	f001 fcca 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0011001, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2119      	movs	r1, #25
 80001ee:	4820      	ldr	r0, [pc, #128]	; (8000270 <display7SEG+0x124>)
 80001f0:	f001 fcc5 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 80001f4:	e037      	b.n	8000266 <display7SEG+0x11a>
		case 5:
			HAL_GPIO_WritePin(GPIOB, 0B1101101, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	216d      	movs	r1, #109	; 0x6d
 80001fa:	481d      	ldr	r0, [pc, #116]	; (8000270 <display7SEG+0x124>)
 80001fc:	f001 fcbf 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0010010, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2112      	movs	r1, #18
 8000204:	481a      	ldr	r0, [pc, #104]	; (8000270 <display7SEG+0x124>)
 8000206:	f001 fcba 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 800020a:	e02c      	b.n	8000266 <display7SEG+0x11a>
		case 6:
			HAL_GPIO_WritePin(GPIOB, 0B1111101, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	217d      	movs	r1, #125	; 0x7d
 8000210:	4817      	ldr	r0, [pc, #92]	; (8000270 <display7SEG+0x124>)
 8000212:	f001 fcb4 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0000010, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2102      	movs	r1, #2
 800021a:	4815      	ldr	r0, [pc, #84]	; (8000270 <display7SEG+0x124>)
 800021c:	f001 fcaf 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 8000220:	e021      	b.n	8000266 <display7SEG+0x11a>
		case 7:
			HAL_GPIO_WritePin(GPIOB, 0B0000111, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2107      	movs	r1, #7
 8000226:	4812      	ldr	r0, [pc, #72]	; (8000270 <display7SEG+0x124>)
 8000228:	f001 fca9 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B1111000, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2178      	movs	r1, #120	; 0x78
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <display7SEG+0x124>)
 8000232:	f001 fca4 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 8000236:	e016      	b.n	8000266 <display7SEG+0x11a>
		case 8:
			HAL_GPIO_WritePin(GPIOB, 0B1111111, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	217f      	movs	r1, #127	; 0x7f
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <display7SEG+0x124>)
 800023e:	f001 fc9e 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 8000242:	e010      	b.n	8000266 <display7SEG+0x11a>
		case 9:
			HAL_GPIO_WritePin(GPIOB, 0B1101111, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	216f      	movs	r1, #111	; 0x6f
 8000248:	4809      	ldr	r0, [pc, #36]	; (8000270 <display7SEG+0x124>)
 800024a:	f001 fc98 	bl	8001b7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, 0B0010000, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2110      	movs	r1, #16
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <display7SEG+0x124>)
 8000254:	f001 fc93 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 8000258:	e005      	b.n	8000266 <display7SEG+0x11a>
		default:
			HAL_GPIO_WritePin(GPIOB, 0B1111111, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	217f      	movs	r1, #127	; 0x7f
 800025e:	4804      	ldr	r0, [pc, #16]	; (8000270 <display7SEG+0x124>)
 8000260:	f001 fc8d 	bl	8001b7e <HAL_GPIO_WritePin>
			break;
 8000264:	bf00      	nop
	}
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010c00 	.word	0x40010c00

08000274 <update7SEG>:

void update7SEG(int index){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b03      	cmp	r3, #3
 8000280:	d822      	bhi.n	80002c8 <update7SEG+0x54>
 8000282:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <update7SEG+0x14>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	08000299 	.word	0x08000299
 800028c:	080002a5 	.word	0x080002a5
 8000290:	080002b1 	.word	0x080002b1
 8000294:	080002bd 	.word	0x080002bd
    switch (index){
        case 0:
            //Display the first 7SEG with led_buffer[0]
            display7SEG(led_buffer[0]);
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <update7SEG+0x60>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff55 	bl	800014c <display7SEG>
            break;
 80002a2:	e012      	b.n	80002ca <update7SEG+0x56>
        case 1:
            //Display the second 7SEG with led_buffer[1]
            display7SEG(led_buffer[1]);
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <update7SEG+0x60>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff4f 	bl	800014c <display7SEG>
            break;
 80002ae:	e00c      	b.n	80002ca <update7SEG+0x56>
        case 2:
            //Display the third 7SEG with led_buffer[2]
            display7SEG(led_buffer[2]);
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <update7SEG+0x60>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff49 	bl	800014c <display7SEG>
            break;
 80002ba:	e006      	b.n	80002ca <update7SEG+0x56>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
            display7SEG(led_buffer[3]);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <update7SEG+0x60>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff43 	bl	800014c <display7SEG>
            break;
 80002c6:	e000      	b.n	80002ca <update7SEG+0x56>
        default:
            break;
 80002c8:	bf00      	nop
    }
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000

080002d8 <updateBufferForIncTime>:
//	led_buffer[1] = (currentCounter(0) / 100) % 10;
//	led_buffer[2] = currentCounter(1) / 1000;
//	led_buffer[3] = (currentCounter(1) / 100) % 10;
//}

void updateBufferForIncTime() {
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	// 2 7seg LEDs to display the value
	led_buffer[0] = time_count / 10;
 80002dc:	4b26      	ldr	r3, [pc, #152]	; (8000378 <updateBufferForIncTime+0xa0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a26      	ldr	r2, [pc, #152]	; (800037c <updateBufferForIncTime+0xa4>)
 80002e2:	fb82 1203 	smull	r1, r2, r2, r3
 80002e6:	1092      	asrs	r2, r2, #2
 80002e8:	17db      	asrs	r3, r3, #31
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	4a24      	ldr	r2, [pc, #144]	; (8000380 <updateBufferForIncTime+0xa8>)
 80002ee:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time_count % 10;
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <updateBufferForIncTime+0xa0>)
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <updateBufferForIncTime+0xa4>)
 80002f6:	fb83 2301 	smull	r2, r3, r3, r1
 80002fa:	109a      	asrs	r2, r3, #2
 80002fc:	17cb      	asrs	r3, r1, #31
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	1aca      	subs	r2, r1, r3
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <updateBufferForIncTime+0xa8>)
 800030c:	605a      	str	r2, [r3, #4]

	// 2 7seg LEDs to display the mode
	led_buffer[2] = 0;
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <updateBufferForIncTime+0xa8>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
	switch (mode) {
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <updateBufferForIncTime+0xac>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	3b0a      	subs	r3, #10
 800031a:	2b05      	cmp	r3, #5
 800031c:	d826      	bhi.n	800036c <updateBufferForIncTime+0x94>
 800031e:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <updateBufferForIncTime+0x4c>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	0800033d 	.word	0x0800033d
 8000328:	08000345 	.word	0x08000345
 800032c:	0800034d 	.word	0x0800034d
 8000330:	08000355 	.word	0x08000355
 8000334:	0800035d 	.word	0x0800035d
 8000338:	08000365 	.word	0x08000365
		case MODE_2:
			led_buffer[3] = 2;
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <updateBufferForIncTime+0xa8>)
 800033e:	2202      	movs	r2, #2
 8000340:	60da      	str	r2, [r3, #12]
			break;
 8000342:	e014      	b.n	800036e <updateBufferForIncTime+0x96>
		case MODE_3:
			led_buffer[3] = 3;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <updateBufferForIncTime+0xa8>)
 8000346:	2203      	movs	r2, #3
 8000348:	60da      	str	r2, [r3, #12]
			break;
 800034a:	e010      	b.n	800036e <updateBufferForIncTime+0x96>
		case MODE_4:
			led_buffer[3] = 4;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <updateBufferForIncTime+0xa8>)
 800034e:	2204      	movs	r2, #4
 8000350:	60da      	str	r2, [r3, #12]
			break;
 8000352:	e00c      	b.n	800036e <updateBufferForIncTime+0x96>
		case INC_RED:
			led_buffer[3] = 2;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <updateBufferForIncTime+0xa8>)
 8000356:	2202      	movs	r2, #2
 8000358:	60da      	str	r2, [r3, #12]
			break;
 800035a:	e008      	b.n	800036e <updateBufferForIncTime+0x96>
		case INC_AMBER:
			led_buffer[3] = 3;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <updateBufferForIncTime+0xa8>)
 800035e:	2203      	movs	r2, #3
 8000360:	60da      	str	r2, [r3, #12]
			break;
 8000362:	e004      	b.n	800036e <updateBufferForIncTime+0x96>
		case INC_GREEN:
			led_buffer[3] = 4;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <updateBufferForIncTime+0xa8>)
 8000366:	2204      	movs	r2, #4
 8000368:	60da      	str	r2, [r3, #12]
			break;
 800036a:	e000      	b.n	800036e <updateBufferForIncTime+0x96>
		default:
			break;
 800036c:	bf00      	nop
	}
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000074 	.word	0x20000074
 800037c:	66666667 	.word	0x66666667
 8000380:	20000000 	.word	0x20000000
 8000384:	20000020 	.word	0x20000020

08000388 <SEG0_on>:

void SEG0_on() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0xE00, SEG_OFF);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <SEG0_on+0x28>)
 8000394:	f001 fbf3 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SEG_ON);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	4804      	ldr	r0, [pc, #16]	; (80003b0 <SEG0_on+0x28>)
 80003a0:	f001 fbed 	bl	8001b7e <HAL_GPIO_WritePin>
	update7SEG(0);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff65 	bl	8000274 <update7SEG>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010800 	.word	0x40010800

080003b4 <SEG1_on>:

void SEG1_on() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0xD00, SEG_OFF);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80003be:	4807      	ldr	r0, [pc, #28]	; (80003dc <SEG1_on+0x28>)
 80003c0:	f001 fbdd 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SEG_ON);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <SEG1_on+0x28>)
 80003cc:	f001 fbd7 	bl	8001b7e <HAL_GPIO_WritePin>
	update7SEG(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff4f 	bl	8000274 <update7SEG>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010800 	.word	0x40010800

080003e0 <SEG2_on>:

void SEG2_on() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0xB00, SEG_OFF);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <SEG2_on+0x28>)
 80003ec:	f001 fbc7 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SEG_ON);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <SEG2_on+0x28>)
 80003f8:	f001 fbc1 	bl	8001b7e <HAL_GPIO_WritePin>
	update7SEG(2);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f7ff ff39 	bl	8000274 <update7SEG>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010800 	.word	0x40010800

0800040c <SEG3_on>:

void SEG3_on() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0x700, SEG_OFF);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000416:	4807      	ldr	r0, [pc, #28]	; (8000434 <SEG3_on+0x28>)
 8000418:	f001 fbb1 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SEG_ON);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000422:	4804      	ldr	r0, [pc, #16]	; (8000434 <SEG3_on+0x28>)
 8000424:	f001 fbab 	bl	8001b7e <HAL_GPIO_WritePin>
	update7SEG(3);
 8000428:	2003      	movs	r0, #3
 800042a:	f7ff ff23 	bl	8000274 <update7SEG>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800

08000438 <run7SEG>:

void run7SEG() {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	SCH_Add_Task(SEG0_on, 0, SEG_switching_time * 4);
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <run7SEG+0x5c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	461a      	mov	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	4814      	ldr	r0, [pc, #80]	; (8000498 <run7SEG+0x60>)
 8000448:	f000 fe24 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(SEG1_on, SEG_switching_time, SEG_switching_time * 4);
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <run7SEG+0x5c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <run7SEG+0x5c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	461a      	mov	r2, r3
 800045a:	4810      	ldr	r0, [pc, #64]	; (800049c <run7SEG+0x64>)
 800045c:	f000 fe1a 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(SEG2_on, SEG_switching_time * 2, SEG_switching_time * 4);
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <run7SEG+0x5c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	4619      	mov	r1, r3
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <run7SEG+0x5c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	461a      	mov	r2, r3
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <run7SEG+0x68>)
 8000472:	f000 fe0f 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(SEG3_on, SEG_switching_time * 3, SEG_switching_time * 4);
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <run7SEG+0x5c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4613      	mov	r3, r2
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	4619      	mov	r1, r3
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <run7SEG+0x5c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	461a      	mov	r2, r3
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <run7SEG+0x6c>)
 800048c:	f000 fe02 	bl	8001094 <SCH_Add_Task>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000030 	.word	0x20000030
 8000498:	08000389 	.word	0x08000389
 800049c:	080003b5 	.word	0x080003b5
 80004a0:	080003e1 	.word	0x080003e1
 80004a4:	0800040d 	.word	0x0800040d

080004a8 <countDownTime>:


void countDownTime() {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	switch (hState) {
 80004ac:	4b69      	ldr	r3, [pc, #420]	; (8000654 <countDownTime+0x1ac>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b10      	subs	r3, #16
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d860      	bhi.n	8000578 <countDownTime+0xd0>
 80004b6:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <countDownTime+0x14>)
 80004b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004bc:	080004cd 	.word	0x080004cd
 80004c0:	080004e9 	.word	0x080004e9
 80004c4:	08000519 	.word	0x08000519
 80004c8:	08000549 	.word	0x08000549
		case AUTO_INIT:
			h_count_down = RED_time / 1000;
 80004cc:	4b62      	ldr	r3, [pc, #392]	; (8000658 <countDownTime+0x1b0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a62      	ldr	r2, [pc, #392]	; (800065c <countDownTime+0x1b4>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1192      	asrs	r2, r2, #6
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4a60      	ldr	r2, [pc, #384]	; (8000660 <countDownTime+0x1b8>)
 80004de:	6013      	str	r3, [r2, #0]
			hState = AUTO_RED;
 80004e0:	4b5c      	ldr	r3, [pc, #368]	; (8000654 <countDownTime+0x1ac>)
 80004e2:	2211      	movs	r2, #17
 80004e4:	601a      	str	r2, [r3, #0]
			break;
 80004e6:	e048      	b.n	800057a <countDownTime+0xd2>

		case AUTO_RED:
			if (h_count_down == 1) {
 80004e8:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <countDownTime+0x1b8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10d      	bne.n	800050c <countDownTime+0x64>
				h_count_down = GREEN_time / 1000;
 80004f0:	4b5c      	ldr	r3, [pc, #368]	; (8000664 <countDownTime+0x1bc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a59      	ldr	r2, [pc, #356]	; (800065c <countDownTime+0x1b4>)
 80004f6:	fb82 1203 	smull	r1, r2, r2, r3
 80004fa:	1192      	asrs	r2, r2, #6
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	4a57      	ldr	r2, [pc, #348]	; (8000660 <countDownTime+0x1b8>)
 8000502:	6013      	str	r3, [r2, #0]
				hState = AUTO_GREEN;
 8000504:	4b53      	ldr	r3, [pc, #332]	; (8000654 <countDownTime+0x1ac>)
 8000506:	2212      	movs	r2, #18
 8000508:	601a      	str	r2, [r3, #0]
			}
			else h_count_down--;
			break;
 800050a:	e036      	b.n	800057a <countDownTime+0xd2>
			else h_count_down--;
 800050c:	4b54      	ldr	r3, [pc, #336]	; (8000660 <countDownTime+0x1b8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a53      	ldr	r2, [pc, #332]	; (8000660 <countDownTime+0x1b8>)
 8000514:	6013      	str	r3, [r2, #0]
			break;
 8000516:	e030      	b.n	800057a <countDownTime+0xd2>

		case AUTO_GREEN:
			if (h_count_down == 1) {
 8000518:	4b51      	ldr	r3, [pc, #324]	; (8000660 <countDownTime+0x1b8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10d      	bne.n	800053c <countDownTime+0x94>
				h_count_down = AMBER_time / 1000;
 8000520:	4b51      	ldr	r3, [pc, #324]	; (8000668 <countDownTime+0x1c0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a4d      	ldr	r2, [pc, #308]	; (800065c <countDownTime+0x1b4>)
 8000526:	fb82 1203 	smull	r1, r2, r2, r3
 800052a:	1192      	asrs	r2, r2, #6
 800052c:	17db      	asrs	r3, r3, #31
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	4a4b      	ldr	r2, [pc, #300]	; (8000660 <countDownTime+0x1b8>)
 8000532:	6013      	str	r3, [r2, #0]
				hState = AUTO_AMBER;
 8000534:	4b47      	ldr	r3, [pc, #284]	; (8000654 <countDownTime+0x1ac>)
 8000536:	2213      	movs	r2, #19
 8000538:	601a      	str	r2, [r3, #0]
			}
			else h_count_down--;
			break;
 800053a:	e01e      	b.n	800057a <countDownTime+0xd2>
			else h_count_down--;
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <countDownTime+0x1b8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a47      	ldr	r2, [pc, #284]	; (8000660 <countDownTime+0x1b8>)
 8000544:	6013      	str	r3, [r2, #0]
			break;
 8000546:	e018      	b.n	800057a <countDownTime+0xd2>

		case AUTO_AMBER:
			if (h_count_down == 1) {
 8000548:	4b45      	ldr	r3, [pc, #276]	; (8000660 <countDownTime+0x1b8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d10d      	bne.n	800056c <countDownTime+0xc4>
				h_count_down = RED_time / 1000;
 8000550:	4b41      	ldr	r3, [pc, #260]	; (8000658 <countDownTime+0x1b0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a41      	ldr	r2, [pc, #260]	; (800065c <countDownTime+0x1b4>)
 8000556:	fb82 1203 	smull	r1, r2, r2, r3
 800055a:	1192      	asrs	r2, r2, #6
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	4a3f      	ldr	r2, [pc, #252]	; (8000660 <countDownTime+0x1b8>)
 8000562:	6013      	str	r3, [r2, #0]
				hState = AUTO_RED;
 8000564:	4b3b      	ldr	r3, [pc, #236]	; (8000654 <countDownTime+0x1ac>)
 8000566:	2211      	movs	r2, #17
 8000568:	601a      	str	r2, [r3, #0]
			}
			else h_count_down--;
			break;
 800056a:	e006      	b.n	800057a <countDownTime+0xd2>
			else h_count_down--;
 800056c:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <countDownTime+0x1b8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a3b      	ldr	r2, [pc, #236]	; (8000660 <countDownTime+0x1b8>)
 8000574:	6013      	str	r3, [r2, #0]
			break;
 8000576:	e000      	b.n	800057a <countDownTime+0xd2>

		default:
			break;
 8000578:	bf00      	nop
	}

	switch (vState) {
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <countDownTime+0x1c4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b10      	subs	r3, #16
 8000580:	2b03      	cmp	r3, #3
 8000582:	d861      	bhi.n	8000648 <countDownTime+0x1a0>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <countDownTime+0xe4>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005b9 	.word	0x080005b9
 8000594:	080005e9 	.word	0x080005e9
 8000598:	08000619 	.word	0x08000619
		case AUTO_INIT:
			v_count_down = GREEN_time / 1000;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <countDownTime+0x1bc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a2e      	ldr	r2, [pc, #184]	; (800065c <countDownTime+0x1b4>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1192      	asrs	r2, r2, #6
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a30      	ldr	r2, [pc, #192]	; (8000670 <countDownTime+0x1c8>)
 80005ae:	6013      	str	r3, [r2, #0]
			vState = AUTO_GREEN;
 80005b0:	4b2e      	ldr	r3, [pc, #184]	; (800066c <countDownTime+0x1c4>)
 80005b2:	2212      	movs	r2, #18
 80005b4:	601a      	str	r2, [r3, #0]
			break;
 80005b6:	e048      	b.n	800064a <countDownTime+0x1a2>

		case AUTO_RED:
			if (v_count_down == 1) {
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <countDownTime+0x1c8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10d      	bne.n	80005dc <countDownTime+0x134>
				v_count_down = GREEN_time / 1000;
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <countDownTime+0x1bc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <countDownTime+0x1b4>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	1192      	asrs	r2, r2, #6
 80005cc:	17db      	asrs	r3, r3, #31
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <countDownTime+0x1c8>)
 80005d2:	6013      	str	r3, [r2, #0]
				vState = AUTO_GREEN;
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <countDownTime+0x1c4>)
 80005d6:	2212      	movs	r2, #18
 80005d8:	601a      	str	r2, [r3, #0]
			}
			else v_count_down--;
			break;
 80005da:	e036      	b.n	800064a <countDownTime+0x1a2>
			else v_count_down--;
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <countDownTime+0x1c8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4a23      	ldr	r2, [pc, #140]	; (8000670 <countDownTime+0x1c8>)
 80005e4:	6013      	str	r3, [r2, #0]
			break;
 80005e6:	e030      	b.n	800064a <countDownTime+0x1a2>

		case AUTO_GREEN:
			if (v_count_down == 1) {
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <countDownTime+0x1c8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10d      	bne.n	800060c <countDownTime+0x164>
				v_count_down = AMBER_time / 1000;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <countDownTime+0x1c0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <countDownTime+0x1b4>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1192      	asrs	r2, r2, #6
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <countDownTime+0x1c8>)
 8000602:	6013      	str	r3, [r2, #0]
				vState = AUTO_AMBER;
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <countDownTime+0x1c4>)
 8000606:	2213      	movs	r2, #19
 8000608:	601a      	str	r2, [r3, #0]
			}
			else v_count_down--;
			break;
 800060a:	e01e      	b.n	800064a <countDownTime+0x1a2>
			else v_count_down--;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <countDownTime+0x1c8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b01      	subs	r3, #1
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <countDownTime+0x1c8>)
 8000614:	6013      	str	r3, [r2, #0]
			break;
 8000616:	e018      	b.n	800064a <countDownTime+0x1a2>

		case AUTO_AMBER:
			if (v_count_down == 1) {
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <countDownTime+0x1c8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10d      	bne.n	800063c <countDownTime+0x194>
				v_count_down = RED_time / 1000;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <countDownTime+0x1b0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <countDownTime+0x1b4>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <countDownTime+0x1c8>)
 8000632:	6013      	str	r3, [r2, #0]
				vState = AUTO_RED;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <countDownTime+0x1c4>)
 8000636:	2211      	movs	r2, #17
 8000638:	601a      	str	r2, [r3, #0]
			}
			else v_count_down--;
			break;
 800063a:	e006      	b.n	800064a <countDownTime+0x1a2>
			else v_count_down--;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <countDownTime+0x1c8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <countDownTime+0x1c8>)
 8000644:	6013      	str	r3, [r2, #0]
			break;
 8000646:	e000      	b.n	800064a <countDownTime+0x1a2>

		default:
			break;
 8000648:	bf00      	nop
	}
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000010 	.word	0x20000010
 8000658:	20000024 	.word	0x20000024
 800065c:	10624dd3 	.word	0x10624dd3
 8000660:	20000060 	.word	0x20000060
 8000664:	20000028 	.word	0x20000028
 8000668:	2000002c 	.word	0x2000002c
 800066c:	20000014 	.word	0x20000014
 8000670:	20000064 	.word	0x20000064

08000674 <updateBufferForMode1>:

void updateBufferForMode1() {
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	led_buffer[0] = h_count_down / 10;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <updateBufferForMode1+0x70>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <updateBufferForMode1+0x74>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1092      	asrs	r2, r2, #2
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <updateBufferForMode1+0x78>)
 800068a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = h_count_down % 10;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <updateBufferForMode1+0x70>)
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <updateBufferForMode1+0x74>)
 8000692:	fb83 2301 	smull	r2, r3, r3, r1
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	17cb      	asrs	r3, r1, #31
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <updateBufferForMode1+0x78>)
 80006a8:	605a      	str	r2, [r3, #4]
	led_buffer[2] = v_count_down / 10;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <updateBufferForMode1+0x7c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <updateBufferForMode1+0x74>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1092      	asrs	r2, r2, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <updateBufferForMode1+0x78>)
 80006bc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = v_count_down % 10;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <updateBufferForMode1+0x7c>)
 80006c0:	6819      	ldr	r1, [r3, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <updateBufferForMode1+0x74>)
 80006c4:	fb83 2301 	smull	r2, r3, r3, r1
 80006c8:	109a      	asrs	r2, r3, #2
 80006ca:	17cb      	asrs	r3, r1, #31
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	1aca      	subs	r2, r1, r3
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <updateBufferForMode1+0x78>)
 80006da:	60da      	str	r2, [r3, #12]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000060 	.word	0x20000060
 80006e8:	66666667 	.word	0x66666667
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000064 	.word	0x20000064

080006f4 <runCount>:

void runCount() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	SCH_Add_Task(countDownTime, 0, 1000);
 80006f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006fc:	2100      	movs	r1, #0
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <runCount+0x14>)
 8000700:	f000 fcc8 	bl	8001094 <SCH_Add_Task>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	080004a9 	.word	0x080004a9

0800070c <red1_on>:
 *      Author: Admin
 */

#include "LEDs_display.h"

void red1_on() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_ON);
 8000710:	2201      	movs	r2, #1
 8000712:	2104      	movs	r1, #4
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <red1_on+0x28>)
 8000716:	f001 fa32 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <red1_on+0x28>)
 8000720:	f001 fa2d 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, LED_OFF);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <red1_on+0x28>)
 800072a:	f001 fa28 	bl	8001b7e <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40010800 	.word	0x40010800

08000738 <green1_on>:

void green1_on() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 800073c:	2200      	movs	r2, #0
 800073e:	2104      	movs	r1, #4
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <green1_on+0x28>)
 8000742:	f001 fa1c 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_ON);
 8000746:	2201      	movs	r2, #1
 8000748:	2110      	movs	r1, #16
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <green1_on+0x28>)
 800074c:	f001 fa17 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, LED_OFF);
 8000750:	2200      	movs	r2, #0
 8000752:	2108      	movs	r1, #8
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <green1_on+0x28>)
 8000756:	f001 fa12 	bl	8001b7e <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800

08000764 <amber1_on>:

void amber1_on() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, LED_OFF);
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <amber1_on+0x28>)
 800076e:	f001 fa06 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, LED_OFF);
 8000772:	2200      	movs	r2, #0
 8000774:	2110      	movs	r1, #16
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <amber1_on+0x28>)
 8000778:	f001 fa01 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, LED_ON);
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <amber1_on+0x28>)
 8000782:	f001 f9fc 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010800 	.word	0x40010800

08000790 <red2_on>:

void red2_on() {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_ON);
 8000794:	2201      	movs	r2, #1
 8000796:	2120      	movs	r1, #32
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <red2_on+0x28>)
 800079a:	f001 f9f0 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 800079e:	2200      	movs	r2, #0
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <red2_on+0x28>)
 80007a4:	f001 f9eb 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, LED_OFF);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <red2_on+0x28>)
 80007ae:	f001 f9e6 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010800 	.word	0x40010800

080007bc <green2_on>:

void green2_on() {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2120      	movs	r1, #32
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <green2_on+0x28>)
 80007c6:	f001 f9da 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_ON);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <green2_on+0x28>)
 80007d0:	f001 f9d5 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, LED_OFF);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <green2_on+0x28>)
 80007da:	f001 f9d0 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800

080007e8 <amber2_on>:

void amber2_on() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, LED_OFF);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <amber2_on+0x28>)
 80007f2:	f001 f9c4 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, LED_OFF);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <amber2_on+0x28>)
 80007fc:	f001 f9bf 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, LED_ON);
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <amber2_on+0x28>)
 8000806:	f001 f9ba 	bl	8001b7e <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LEDsDisplay>:

void LEDsDisplay() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	int LEDCycle = RED_time + GREEN_time + AMBER_time;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <LEDsDisplay+0x84>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <LEDsDisplay+0x88>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	441a      	add	r2, r3
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <LEDsDisplay+0x8c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4413      	add	r3, r2
 800082a:	607b      	str	r3, [r7, #4]

	SCH_Add_Task(red1_on, 0, LEDCycle);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	461a      	mov	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	481c      	ldr	r0, [pc, #112]	; (80008a4 <LEDsDisplay+0x90>)
 8000834:	f000 fc2e 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(green1_on, RED_time, LEDCycle);
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <LEDsDisplay+0x84>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	461a      	mov	r2, r3
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <LEDsDisplay+0x94>)
 8000844:	f000 fc26 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(amber1_on, RED_time + GREEN_time, LEDCycle);
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <LEDsDisplay+0x84>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <LEDsDisplay+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4413      	add	r3, r2
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	461a      	mov	r2, r3
 8000858:	4814      	ldr	r0, [pc, #80]	; (80008ac <LEDsDisplay+0x98>)
 800085a:	f000 fc1b 	bl	8001094 <SCH_Add_Task>

	SCH_Add_Task(green2_on, 0, LEDCycle);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	461a      	mov	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	4812      	ldr	r0, [pc, #72]	; (80008b0 <LEDsDisplay+0x9c>)
 8000866:	f000 fc15 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(amber2_on, GREEN_time, LEDCycle);
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <LEDsDisplay+0x88>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	461a      	mov	r2, r3
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <LEDsDisplay+0xa0>)
 8000876:	f000 fc0d 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(red2_on, GREEN_time + AMBER_time, LEDCycle);
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <LEDsDisplay+0x88>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LEDsDisplay+0x8c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	461a      	mov	r2, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <LEDsDisplay+0xa4>)
 800088c:	f000 fc02 	bl	8001094 <SCH_Add_Task>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000024 	.word	0x20000024
 800089c:	20000028 	.word	0x20000028
 80008a0:	2000002c 	.word	0x2000002c
 80008a4:	0800070d 	.word	0x0800070d
 80008a8:	08000739 	.word	0x08000739
 80008ac:	08000765 	.word	0x08000765
 80008b0:	080007bd 	.word	0x080007bd
 80008b4:	080007e9 	.word	0x080007e9
 80008b8:	08000791 	.word	0x08000791

080008bc <LEDsOn>:

void LEDsOn() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0xFC, LED_ON);
 80008c0:	2201      	movs	r2, #1
 80008c2:	21fc      	movs	r1, #252	; 0xfc
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <LEDsOn+0x14>)
 80008c6:	f001 f95a 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010800 	.word	0x40010800

080008d4 <LEDsOff>:

void LEDsOff() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0xFC, LED_OFF);
 80008d8:	2200      	movs	r2, #0
 80008da:	21fc      	movs	r1, #252	; 0xfc
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <LEDsOff+0x14>)
 80008de:	f001 f94e 	bl	8001b7e <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010800 	.word	0x40010800

080008ec <LEDsBlinking>:

void LEDsBlinking() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	SCH_Add_Task(LEDsOn, 0, LED_blinking_time * 2);
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <LEDsBlinking+0x2c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	461a      	mov	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <LEDsBlinking+0x30>)
 80008fc:	f000 fbca 	bl	8001094 <SCH_Add_Task>
	SCH_Add_Task(LEDsOff, LED_blinking_time, LED_blinking_time * 2);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LEDsBlinking+0x2c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <LEDsBlinking+0x2c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <LEDsBlinking+0x34>)
 8000910:	f000 fbc0 	bl	8001094 <SCH_Add_Task>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000034 	.word	0x20000034
 800091c:	080008bd 	.word	0x080008bd
 8000920:	080008d5 	.word	0x080008d5

08000924 <isButtonPressed>:
int button_state[NO_OF_BUTTONS] = { 0, 0, 0 };
int button_flag[NO_OF_BUTTONS];
GPIO_PinState key_reg[NO_OF_BUTTONS][4];
int counterForKeyPress[NO_OF_BUTTONS];

int isButtonPressed(int button) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if (button_flag[button]) {
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <isButtonPressed+0x30>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <isButtonPressed+0x22>
		button_flag[button] = 0;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <isButtonPressed+0x30>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2100      	movs	r1, #0
 800093e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <isButtonPressed+0x24>
	}
	else return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000088 	.word	0x20000088

08000958 <setTimerForButton>:

void setTimerForButton(int button) {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	counterForKeyPress[button] = timerForKeyPress / timerCycle;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <setTimerForButton+0x28>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <setTimerForButton+0x2c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	fb92 f2f3 	sdiv	r2, r2, r3
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <setTimerForButton+0x30>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000001c 	.word	0x2000001c
 8000984:	20000018 	.word	0x20000018
 8000988:	20000094 	.word	0x20000094

0800098c <fsm_button_processing>:

void fsm_button_processing(int button) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	switch (button_state[button]) {
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <fsm_button_processing+0xc0>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <fsm_button_processing+0x1a>
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d01b      	beq.n	80009dc <fsm_button_processing+0x50>
				}
			}
			break;

		default:
			break;
 80009a4:	e04d      	b.n	8000a42 <fsm_button_processing+0xb6>
			if (key_reg[button][2] == PRESSED_STATE) {
 80009a6:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <fsm_button_processing+0xc4>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d143      	bne.n	8000a3c <fsm_button_processing+0xb0>
				key_reg[button][3] = PRESSED_STATE;
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <fsm_button_processing+0xc4>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	70da      	strb	r2, [r3, #3]
				button_state[button] = BUTTON_IS_PRESSED;
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <fsm_button_processing+0xc0>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2101      	movs	r1, #1
 80009c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				button_flag[button] = 1;
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <fsm_button_processing+0xc8>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2101      	movs	r1, #1
 80009d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimerForButton(button);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffbf 	bl	8000958 <setTimerForButton>
			break;
 80009da:	e02f      	b.n	8000a3c <fsm_button_processing+0xb0>
			if (key_reg[button][2] == NORMAL_STATE) {
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <fsm_button_processing+0xc4>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10b      	bne.n	8000a02 <fsm_button_processing+0x76>
				key_reg[button][3] = NORMAL_STATE;
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <fsm_button_processing+0xc4>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	2201      	movs	r2, #1
 80009f4:	70da      	strb	r2, [r3, #3]
				button_state[button] = BUTTON_IS_RELEASED;
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <fsm_button_processing+0xc0>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2100      	movs	r1, #0
 80009fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000a00:	e01e      	b.n	8000a40 <fsm_button_processing+0xb4>
				counterForKeyPress[button]--;
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <fsm_button_processing+0xcc>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4912      	ldr	r1, [pc, #72]	; (8000a58 <fsm_button_processing+0xcc>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (!counterForKeyPress[button]) {
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <fsm_button_processing+0xcc>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10f      	bne.n	8000a40 <fsm_button_processing+0xb4>
					button_state[button] = BUTTON_IS_PRESSED;
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <fsm_button_processing+0xc0>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2101      	movs	r1, #1
 8000a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[button] = 1;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <fsm_button_processing+0xc8>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimerForButton(button);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff8f 	bl	8000958 <setTimerForButton>
			break;
 8000a3a:	e001      	b.n	8000a40 <fsm_button_processing+0xb4>
			break;
 8000a3c:	bf00      	nop
 8000a3e:	e000      	b.n	8000a42 <fsm_button_processing+0xb6>
			break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000068 	.word	0x20000068
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	20000088 	.word	0x20000088
 8000a58:	20000094 	.word	0x20000094

08000a5c <getKeyInput>:

void getKeyInput() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	for (int button = 0; button < NO_OF_BUTTONS; button++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	e068      	b.n	8000b3a <getKeyInput+0xde>
		key_reg[button][0] = key_reg[button][1];
 8000a68:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <getKeyInput+0xf0>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	7859      	ldrb	r1, [r3, #1]
 8000a72:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <getKeyInput+0xf0>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		key_reg[button][1] = key_reg[button][2];
 8000a7a:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <getKeyInput+0xf0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	7899      	ldrb	r1, [r3, #2]
 8000a84:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <getKeyInput+0xf0>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	705a      	strb	r2, [r3, #1]
		switch (button) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d025      	beq.n	8000ae2 <getKeyInput+0x86>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dc30      	bgt.n	8000afe <getKeyInput+0xa2>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <getKeyInput+0x4e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d00e      	beq.n	8000ac6 <getKeyInput+0x6a>
				break;
			case BUTTON_3:
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
				break;
			default:
				break;
 8000aa8:	e029      	b.n	8000afe <getKeyInput+0xa2>
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	4828      	ldr	r0, [pc, #160]	; (8000b50 <getKeyInput+0xf4>)
 8000ab0:	f001 f84e 	bl	8001b50 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4a24      	ldr	r2, [pc, #144]	; (8000b4c <getKeyInput+0xf0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	709a      	strb	r2, [r3, #2]
				break;
 8000ac4:	e01c      	b.n	8000b00 <getKeyInput+0xa4>
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <getKeyInput+0xf4>)
 8000acc:	f001 f840 	bl	8001b50 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <getKeyInput+0xf0>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	460a      	mov	r2, r1
 8000ade:	709a      	strb	r2, [r3, #2]
				break;
 8000ae0:	e00e      	b.n	8000b00 <getKeyInput+0xa4>
				key_reg[button][2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <getKeyInput+0xf4>)
 8000ae8:	f001 f832 	bl	8001b50 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <getKeyInput+0xf0>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	709a      	strb	r2, [r3, #2]
				break;
 8000afc:	e000      	b.n	8000b00 <getKeyInput+0xa4>
				break;
 8000afe:	bf00      	nop
		}

		if ((key_reg[button][0] == key_reg[button][1]) && (key_reg[button][1] == key_reg[button][2])) {
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <getKeyInput+0xf0>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000b08:	4910      	ldr	r1, [pc, #64]	; (8000b4c <getKeyInput+0xf0>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d10e      	bne.n	8000b34 <getKeyInput+0xd8>
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <getKeyInput+0xf0>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	785a      	ldrb	r2, [r3, #1]
 8000b20:	490a      	ldr	r1, [pc, #40]	; (8000b4c <getKeyInput+0xf0>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d102      	bne.n	8000b34 <getKeyInput+0xd8>
			fsm_button_processing(button);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff2c 	bl	800098c <fsm_button_processing>
	for (int button = 0; button < NO_OF_BUTTONS; button++) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	dd93      	ble.n	8000a68 <getKeyInput+0xc>
		}
	}
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000007c 	.word	0x2000007c
 8000b50:	40010800 	.word	0x40010800

08000b54 <fsmIncTimeRun>:
 *      Author: Admin
 */

#include "fsm_increasing_time.h"

void fsmIncTimeRun() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	switch (mode) {
 8000b58:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d069      	beq.n	8000c34 <fsmIncTimeRun+0xe0>
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	f300 8098 	bgt.w	8000c96 <fsmIncTimeRun+0x142>
 8000b66:	2b0d      	cmp	r3, #13
 8000b68:	d002      	beq.n	8000b70 <fsmIncTimeRun+0x1c>
 8000b6a:	2b0e      	cmp	r3, #14
 8000b6c:	d031      	beq.n	8000bd2 <fsmIncTimeRun+0x7e>
			}

			break;

		default:
			break;
 8000b6e:	e092      	b.n	8000c96 <fsmIncTimeRun+0x142>
			LEDsBlinking();
 8000b70:	f7ff febc 	bl	80008ec <LEDsBlinking>
			updateBufferForIncTime();
 8000b74:	f7ff fbb0 	bl	80002d8 <updateBufferForIncTime>
			if (isButtonPressed(BUTTON_1)) {
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fed3 	bl	8000924 <isButtonPressed>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <fsmIncTimeRun+0x36>
				mode = MODE_3;
 8000b84:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000b86:	220b      	movs	r2, #11
 8000b88:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3)) {
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff feca 	bl	8000924 <isButtonPressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00a      	beq.n	8000bac <fsmIncTimeRun+0x58>
				mode = MODE_2;
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	601a      	str	r2, [r3, #0]
				RED_time = time_count * 1000;
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <fsmIncTimeRun+0x158>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	4a41      	ldr	r2, [pc, #260]	; (8000cb0 <fsmIncTimeRun+0x15c>)
 8000baa:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2)) {
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff feb9 	bl	8000924 <isButtonPressed>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d070      	beq.n	8000c9a <fsmIncTimeRun+0x146>
				if (time_count > 99) time_count = 0;
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <fsmIncTimeRun+0x158>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b63      	cmp	r3, #99	; 0x63
 8000bbe:	dd02      	ble.n	8000bc6 <fsmIncTimeRun+0x72>
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <fsmIncTimeRun+0x158>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
				time_count++;
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <fsmIncTimeRun+0x158>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a37      	ldr	r2, [pc, #220]	; (8000cac <fsmIncTimeRun+0x158>)
 8000bce:	6013      	str	r3, [r2, #0]
			break;
 8000bd0:	e063      	b.n	8000c9a <fsmIncTimeRun+0x146>
			LEDsBlinking();
 8000bd2:	f7ff fe8b 	bl	80008ec <LEDsBlinking>
			updateBufferForIncTime();
 8000bd6:	f7ff fb7f 	bl	80002d8 <updateBufferForIncTime>
			if (isButtonPressed(BUTTON_1)) {
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fea2 	bl	8000924 <isButtonPressed>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <fsmIncTimeRun+0x98>
				mode = MODE_4;
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000be8:	220c      	movs	r2, #12
 8000bea:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3)) {
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fe99 	bl	8000924 <isButtonPressed>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00a      	beq.n	8000c0e <fsmIncTimeRun+0xba>
				mode = MODE_3;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000bfa:	220b      	movs	r2, #11
 8000bfc:	601a      	str	r2, [r3, #0]
				AMBER_time = time_count * 1000;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <fsmIncTimeRun+0x160>)
 8000c0c:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2)) {
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fe88 	bl	8000924 <isButtonPressed>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d041      	beq.n	8000c9e <fsmIncTimeRun+0x14a>
				if (time_count > 99) time_count = 0;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b63      	cmp	r3, #99	; 0x63
 8000c20:	dd02      	ble.n	8000c28 <fsmIncTimeRun+0xd4>
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
				time_count++;
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c30:	6013      	str	r3, [r2, #0]
			break;
 8000c32:	e034      	b.n	8000c9e <fsmIncTimeRun+0x14a>
			LEDsBlinking();
 8000c34:	f7ff fe5a 	bl	80008ec <LEDsBlinking>
			updateBufferForIncTime();
 8000c38:	f7ff fb4e 	bl	80002d8 <updateBufferForIncTime>
			if (isButtonPressed(BUTTON_1)) {
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fe71 	bl	8000924 <isButtonPressed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <fsmIncTimeRun+0xfa>
				mode = MODE_1;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000c4a:	2209      	movs	r2, #9
 8000c4c:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(BUTTON_3)) {
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fe68 	bl	8000924 <isButtonPressed>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00a      	beq.n	8000c70 <fsmIncTimeRun+0x11c>
				mode = MODE_4;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <fsmIncTimeRun+0x154>)
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	601a      	str	r2, [r3, #0]
				GREEN_time = time_count * 1000;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <fsmIncTimeRun+0x164>)
 8000c6e:	6013      	str	r3, [r2, #0]
			if (isButtonPressed(BUTTON_2)) {
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fe57 	bl	8000924 <isButtonPressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d012      	beq.n	8000ca2 <fsmIncTimeRun+0x14e>
				if (time_count > 99) time_count = 0;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b63      	cmp	r3, #99	; 0x63
 8000c82:	dd02      	ble.n	8000c8a <fsmIncTimeRun+0x136>
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
				time_count++;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <fsmIncTimeRun+0x158>)
 8000c92:	6013      	str	r3, [r2, #0]
			break;
 8000c94:	e005      	b.n	8000ca2 <fsmIncTimeRun+0x14e>
			break;
 8000c96:	bf00      	nop
 8000c98:	e004      	b.n	8000ca4 <fsmIncTimeRun+0x150>
			break;
 8000c9a:	bf00      	nop
 8000c9c:	e002      	b.n	8000ca4 <fsmIncTimeRun+0x150>
			break;
 8000c9e:	bf00      	nop
 8000ca0:	e000      	b.n	8000ca4 <fsmIncTimeRun+0x150>
			break;
 8000ca2:	bf00      	nop
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	20000074 	.word	0x20000074
 8000cb0:	20000024 	.word	0x20000024
 8000cb4:	2000002c 	.word	0x2000002c
 8000cb8:	20000028 	.word	0x20000028

08000cbc <fsmTrafficRun>:

#include "fsm_traffic.h"

int time_count = 0;

void fsmTrafficRun() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	switch (mode) {
 8000cc0:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <fsmTrafficRun+0x164>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3b08      	subs	r3, #8
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	f200 80a0 	bhi.w	8000e0c <fsmTrafficRun+0x150>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <fsmTrafficRun+0x18>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000ce9 	.word	0x08000ce9
 8000cd8:	08000d01 	.word	0x08000d01
 8000cdc:	08000d25 	.word	0x08000d25
 8000ce0:	08000d6d 	.word	0x08000d6d
 8000ce4:	08000db5 	.word	0x08000db5
		case MODE_INIT:
			mode = MODE_1;
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <fsmTrafficRun+0x164>)
 8000cea:	2209      	movs	r2, #9
 8000cec:	601a      	str	r2, [r3, #0]
			SCH_Init();
 8000cee:	f000 f9b7 	bl	8001060 <SCH_Init>
			LEDsDisplay();
 8000cf2:	f7ff fd8f 	bl	8000814 <LEDsDisplay>
			run7SEG();
 8000cf6:	f7ff fb9f 	bl	8000438 <run7SEG>
			runCount();
 8000cfa:	f7ff fcfb 	bl	80006f4 <runCount>
			break;
 8000cfe:	e08c      	b.n	8000e1a <fsmTrafficRun+0x15e>

		case MODE_1:
			if (isButtonPressed(BUTTON_1)) {
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fe0f 	bl	8000924 <isButtonPressed>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <fsmTrafficRun+0x62>
				mode = MODE_2;
 8000d0c:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <fsmTrafficRun+0x164>)
 8000d0e:	220a      	movs	r2, #10
 8000d10:	601a      	str	r2, [r3, #0]
				SCH_Init();
 8000d12:	f000 f9a5 	bl	8001060 <SCH_Init>
				LEDsBlinking();
 8000d16:	f7ff fde9 	bl	80008ec <LEDsBlinking>
				run7SEG();
 8000d1a:	f7ff fb8d 	bl	8000438 <run7SEG>
			}

			// Update time for 7seg LEDs
			updateBufferForMode1();
 8000d1e:	f7ff fca9 	bl	8000674 <updateBufferForMode1>

			break;
 8000d22:	e07a      	b.n	8000e1a <fsmTrafficRun+0x15e>

		case MODE_2:
			if (isButtonPressed(BUTTON_1)) {
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fdfd 	bl	8000924 <isButtonPressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <fsmTrafficRun+0x7a>
				mode = MODE_3;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <fsmTrafficRun+0x164>)
 8000d32:	220b      	movs	r2, #11
 8000d34:	601a      	str	r2, [r3, #0]
			}

			// Update time for 7seg LEDs
			time_count = RED_time / 1000;
 8000d36:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <fsmTrafficRun+0x168>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a3b      	ldr	r2, [pc, #236]	; (8000e28 <fsmTrafficRun+0x16c>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1192      	asrs	r2, r2, #6
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <fsmTrafficRun+0x170>)
 8000d48:	6013      	str	r3, [r2, #0]
			updateBufferForIncTime();
 8000d4a:	f7ff fac5 	bl	80002d8 <updateBufferForIncTime>

			// 2nd button is pressed, increase the time duration value of the red LEDs
			if (isButtonPressed(BUTTON_2)) {
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fde8 	bl	8000924 <isButtonPressed>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d05a      	beq.n	8000e10 <fsmTrafficRun+0x154>
				mode = INC_RED;
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <fsmTrafficRun+0x164>)
 8000d5c:	220d      	movs	r2, #13
 8000d5e:	601a      	str	r2, [r3, #0]
				time_count++;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <fsmTrafficRun+0x170>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <fsmTrafficRun+0x170>)
 8000d68:	6013      	str	r3, [r2, #0]
			}

			break;
 8000d6a:	e051      	b.n	8000e10 <fsmTrafficRun+0x154>

		case MODE_3:
			if (isButtonPressed(BUTTON_1)) {
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fdd9 	bl	8000924 <isButtonPressed>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <fsmTrafficRun+0xc2>
				mode = MODE_4;
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <fsmTrafficRun+0x164>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
			}

			// Update time for 7seg LEDs
			time_count = AMBER_time / 1000;
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <fsmTrafficRun+0x174>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <fsmTrafficRun+0x16c>)
 8000d84:	fb82 1203 	smull	r1, r2, r2, r3
 8000d88:	1192      	asrs	r2, r2, #6
 8000d8a:	17db      	asrs	r3, r3, #31
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <fsmTrafficRun+0x170>)
 8000d90:	6013      	str	r3, [r2, #0]
			updateBufferForIncTime();
 8000d92:	f7ff faa1 	bl	80002d8 <updateBufferForIncTime>

			// 2nd button is pressed, increase the time duration value of the amber LEDs
			if (isButtonPressed(BUTTON_2)) {
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fdc4 	bl	8000924 <isButtonPressed>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d038      	beq.n	8000e14 <fsmTrafficRun+0x158>
				mode = INC_AMBER;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <fsmTrafficRun+0x164>)
 8000da4:	220e      	movs	r2, #14
 8000da6:	601a      	str	r2, [r3, #0]
				time_count++;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <fsmTrafficRun+0x170>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <fsmTrafficRun+0x170>)
 8000db0:	6013      	str	r3, [r2, #0]
			}

			break;
 8000db2:	e02f      	b.n	8000e14 <fsmTrafficRun+0x158>

		case MODE_4:
			if (isButtonPressed(BUTTON_1)) {
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fdb5 	bl	8000924 <isButtonPressed>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00a      	beq.n	8000dd6 <fsmTrafficRun+0x11a>
				mode = MODE_1;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <fsmTrafficRun+0x164>)
 8000dc2:	2209      	movs	r2, #9
 8000dc4:	601a      	str	r2, [r3, #0]
				SCH_Init();
 8000dc6:	f000 f94b 	bl	8001060 <SCH_Init>
				LEDsDisplay();
 8000dca:	f7ff fd23 	bl	8000814 <LEDsDisplay>
				run7SEG();
 8000dce:	f7ff fb33 	bl	8000438 <run7SEG>
				runCount();
 8000dd2:	f7ff fc8f 	bl	80006f4 <runCount>
			}

			// Update time for 7seg LEDs
			time_count = GREEN_time / 1000;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <fsmTrafficRun+0x178>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <fsmTrafficRun+0x16c>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	1192      	asrs	r2, r2, #6
 8000de2:	17db      	asrs	r3, r3, #31
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <fsmTrafficRun+0x170>)
 8000de8:	6013      	str	r3, [r2, #0]
			updateBufferForIncTime();
 8000dea:	f7ff fa75 	bl	80002d8 <updateBufferForIncTime>

			// 2nd button is pressed, increase the time duration value of the green LEDs
			if (isButtonPressed(BUTTON_2)) {
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fd98 	bl	8000924 <isButtonPressed>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00e      	beq.n	8000e18 <fsmTrafficRun+0x15c>
				mode = INC_GREEN;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <fsmTrafficRun+0x164>)
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	601a      	str	r2, [r3, #0]
				time_count++;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <fsmTrafficRun+0x170>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <fsmTrafficRun+0x170>)
 8000e08:	6013      	str	r3, [r2, #0]
			}

			break;
 8000e0a:	e005      	b.n	8000e18 <fsmTrafficRun+0x15c>

		default:
			break;
 8000e0c:	bf00      	nop
 8000e0e:	e004      	b.n	8000e1a <fsmTrafficRun+0x15e>
			break;
 8000e10:	bf00      	nop
 8000e12:	e002      	b.n	8000e1a <fsmTrafficRun+0x15e>
			break;
 8000e14:	bf00      	nop
 8000e16:	e000      	b.n	8000e1a <fsmTrafficRun+0x15e>
			break;
 8000e18:	bf00      	nop
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000020 	.word	0x20000020
 8000e24:	20000024 	.word	0x20000024
 8000e28:	10624dd3 	.word	0x10624dd3
 8000e2c:	20000074 	.word	0x20000074
 8000e30:	2000002c 	.word	0x2000002c
 8000e34:	20000028 	.word	0x20000028

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 fb9e 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f812 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e44:	f000 f84c 	bl	8000ee0 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000e48:	f000 f896 	bl	8000f78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <main+0x2c>)
 8000e4e:	f001 fae7 	bl	8002420 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e52:	f000 f905 	bl	8001060 <SCH_Init>

  while (1)
  {
	  fsmTrafficRun();
 8000e56:	f7ff ff31 	bl	8000cbc <fsmTrafficRun>
	  fsmIncTimeRun();
 8000e5a:	f7ff fe7b 	bl	8000b54 <fsmIncTimeRun>

	  SCH_Dispatch_Tasks();
 8000e5e:	f000 f975 	bl	800114c <SCH_Dispatch_Tasks>
	  fsmTrafficRun();
 8000e62:	e7f8      	b.n	8000e56 <main+0x1e>
 8000e64:	200000a0 	.word	0x200000a0

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b090      	sub	sp, #64	; 0x40
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fe8a 	bl	8002b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fe86 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f8d3 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f8f2 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f8bf 	bl	8001054 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f14:	2209      	movs	r2, #9
 8000f16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f26:	f001 fa2b 	bl	8002380 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f30:	f000 f890 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f42:	f001 fbc1 	bl	80026c8 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f882 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_TIM2_Init+0x94>)
 8000f5e:	f001 fd89 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f68:	f000 f874 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000a0 	.word	0x200000a0

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_GPIO_Init+0xb8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000fc2:	481c      	ldr	r0, [pc, #112]	; (8001034 <MX_GPIO_Init+0xbc>)
 8000fc4:	f000 fddb 	bl	8001b7e <HAL_GPIO_WritePin>
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	217f      	movs	r1, #127	; 0x7f
 8000fcc:	481a      	ldr	r0, [pc, #104]	; (8001038 <MX_GPIO_Init+0xc0>)
 8000fce:	f000 fdd6 	bl	8001b7e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000fd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fd6:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0xbc>)
 8000fec:	f000 fc36 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ff0:	237f      	movs	r3, #127	; 0x7f
 8000ff2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_GPIO_Init+0xc0>)
 8001008:	f000 fc28 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800100c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001010:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_GPIO_Init+0xbc>)
 8001022:	f000 fc1b 	bl	800185c <HAL_GPIO_Init>

}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00

0800103c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001044:	f000 f8d0 	bl	80011e8 <SCH_Update>
	getKeyInput();
 8001048:	f7ff fd08 	bl	8000a5c <getKeyInput>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <SCH_Init>:
#include "global.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint32_t current_tasks = 0;

void SCH_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < current_tasks; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e005      	b.n	8001078 <SCH_Init+0x18>
		SCH_Delete_Task(i);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f919 	bl	80012a4 <SCH_Delete_Task>
	for (uint32_t i = 0; i < current_tasks; i++) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SCH_Init+0x30>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3f4      	bcc.n	800106c <SCH_Init+0xc>
	}
	current_tasks = 0;
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <SCH_Init+0x30>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000078 	.word	0x20000078

08001094 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(void), const uint32_t DELAY, const uint32_t PERIOD) {
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	if (current_tasks < SCH_MAX_TASKS) {
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <SCH_Add_Task+0xac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b27      	cmp	r3, #39	; 0x27
 80010a6:	d845      	bhi.n	8001134 <SCH_Add_Task+0xa0>

		SCH_tasks_G[current_tasks].pTask = pFunction;
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SCH_Add_Task+0xac>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4925      	ldr	r1, [pc, #148]	; (8001144 <SCH_Add_Task+0xb0>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_tasks].Delay = DELAY / timerCycle;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <SCH_Add_Task+0xb4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SCH_Add_Task+0xac>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	fbb3 f1f1 	udiv	r1, r3, r1
 80010cc:	481d      	ldr	r0, [pc, #116]	; (8001144 <SCH_Add_Task+0xb0>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4403      	add	r3, r0
 80010d8:	3304      	adds	r3, #4
 80010da:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[current_tasks].Period = PERIOD / timerCycle;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <SCH_Add_Task+0xb4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <SCH_Add_Task+0xac>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	fbb3 f1f1 	udiv	r1, r3, r1
 80010ec:	4815      	ldr	r0, [pc, #84]	; (8001144 <SCH_Add_Task+0xb0>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4403      	add	r3, r0
 80010f8:	3308      	adds	r3, #8
 80010fa:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[current_tasks].RunMe = 0;
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <SCH_Add_Task+0xac>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4910      	ldr	r1, [pc, #64]	; (8001144 <SCH_Add_Task+0xb0>)
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	330c      	adds	r3, #12
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_tasks].TaskID = current_tasks;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <SCH_Add_Task+0xac>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <SCH_Add_Task+0xac>)
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <SCH_Add_Task+0xb0>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4403      	add	r3, r0
 8001126:	3310      	adds	r3, #16
 8001128:	6019      	str	r1, [r3, #0]

		current_tasks++;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SCH_Add_Task+0xac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <SCH_Add_Task+0xac>)
 8001132:	6013      	str	r3, [r2, #0]
	}
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000078 	.word	0x20000078
 8001144:	200000e8 	.word	0x200000e8
 8001148:	20000018 	.word	0x20000018

0800114c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < current_tasks; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e039      	b.n	80011cc <SCH_Dispatch_Tasks+0x80>

		if (SCH_tasks_G[i].RunMe > 0) {
 8001158:	4921      	ldr	r1, [pc, #132]	; (80011e0 <SCH_Dispatch_Tasks+0x94>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	330c      	adds	r3, #12
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02b      	beq.n	80011c6 <SCH_Dispatch_Tasks+0x7a>

			// Run the next task
			(*SCH_tasks_G[i].pTask)();
 800116e:	491c      	ldr	r1, [pc, #112]	; (80011e0 <SCH_Dispatch_Tasks+0x94>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 8001180:	4917      	ldr	r1, [pc, #92]	; (80011e0 <SCH_Dispatch_Tasks+0x94>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	330c      	adds	r3, #12
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	b2d8      	uxtb	r0, r3
 8001196:	4912      	ldr	r1, [pc, #72]	; (80011e0 <SCH_Dispatch_Tasks+0x94>)
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	330c      	adds	r3, #12
 80011a6:	4602      	mov	r2, r0
 80011a8:	701a      	strb	r2, [r3, #0]

			// Delete one-shot task after running
			if (!SCH_tasks_G[i].Period) {
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <SCH_Dispatch_Tasks+0x94>)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f86f 	bl	80012a4 <SCH_Delete_Task>
	for (uint32_t i = 0; i < current_tasks; i++) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3301      	adds	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SCH_Dispatch_Tasks+0x98>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3c0      	bcc.n	8001158 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000e8 	.word	0x200000e8
 80011e4:	20000078 	.word	0x20000078

080011e8 <SCH_Update>:

void SCH_Update(void) {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < current_tasks; i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	e048      	b.n	8001286 <SCH_Update+0x9e>

		// Not yet ready to run, decrement the delay counter
		if (SCH_tasks_G[i].Delay > 0) {
 80011f4:	4929      	ldr	r1, [pc, #164]	; (800129c <SCH_Update+0xb4>)
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d013      	beq.n	8001232 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 800120a:	4924      	ldr	r1, [pc, #144]	; (800129c <SCH_Update+0xb4>)
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1e59      	subs	r1, r3, #1
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <SCH_Update+0xb4>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4403      	add	r3, r0
 800122c:	3304      	adds	r3, #4
 800122e:	6019      	str	r1, [r3, #0]
 8001230:	e026      	b.n	8001280 <SCH_Update+0x98>

		} else {
			// The task is due to run, schedule periodic tasks to run again
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001232:	491a      	ldr	r1, [pc, #104]	; (800129c <SCH_Update+0xb4>)
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3308      	adds	r3, #8
 8001242:	6819      	ldr	r1, [r3, #0]
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <SCH_Update+0xb4>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4403      	add	r3, r0
 8001252:	3304      	adds	r3, #4
 8001254:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe++;
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <SCH_Update+0xb4>)
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	330c      	adds	r3, #12
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	b2d8      	uxtb	r0, r3
 800126c:	490b      	ldr	r1, [pc, #44]	; (800129c <SCH_Update+0xb4>)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	330c      	adds	r3, #12
 800127c:	4602      	mov	r2, r0
 800127e:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < current_tasks; i++) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SCH_Update+0xb8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3b1      	bcc.n	80011f4 <SCH_Update+0xc>
		}
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	200000e8 	.word	0x200000e8
 80012a0:	20000078 	.word	0x20000078

080012a4 <SCH_Delete_Task>:

void SCH_Delete_Task(const uint32_t TASK_INDEX) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	// Shift the tasks right of the TASK_INDEX to the left
	for (uint32_t i = TASK_INDEX; i < current_tasks - 1; i++) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e061      	b.n	8001376 <SCH_Delete_Task+0xd2>

		SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	4955      	ldr	r1, [pc, #340]	; (800140c <SCH_Delete_Task+0x168>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	4851      	ldr	r0, [pc, #324]	; (800140c <SCH_Delete_Task+0x168>)
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4403      	add	r3, r0
 80012d2:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	494c      	ldr	r1, [pc, #304]	; (800140c <SCH_Delete_Task+0x168>)
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3304      	adds	r3, #4
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	4848      	ldr	r0, [pc, #288]	; (800140c <SCH_Delete_Task+0x168>)
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4403      	add	r3, r0
 80012f6:	3304      	adds	r3, #4
 80012f8:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	4943      	ldr	r1, [pc, #268]	; (800140c <SCH_Delete_Task+0x168>)
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	483f      	ldr	r0, [pc, #252]	; (800140c <SCH_Delete_Task+0x168>)
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4403      	add	r3, r0
 800131c:	3308      	adds	r3, #8
 800131e:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4939      	ldr	r1, [pc, #228]	; (800140c <SCH_Delete_Task+0x168>)
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	330c      	adds	r3, #12
 8001332:	7818      	ldrb	r0, [r3, #0]
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <SCH_Delete_Task+0x168>)
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	330c      	adds	r3, #12
 8001344:	4602      	mov	r2, r0
 8001346:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = SCH_tasks_G[i + 1].TaskID - 1;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	492f      	ldr	r1, [pc, #188]	; (800140c <SCH_Delete_Task+0x168>)
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	3310      	adds	r3, #16
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1e59      	subs	r1, r3, #1
 800135e:	482b      	ldr	r0, [pc, #172]	; (800140c <SCH_Delete_Task+0x168>)
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4403      	add	r3, r0
 800136c:	3310      	adds	r3, #16
 800136e:	6019      	str	r1, [r3, #0]
	for (uint32_t i = TASK_INDEX; i < current_tasks - 1; i++) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <SCH_Delete_Task+0x16c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d397      	bcc.n	80012b2 <SCH_Delete_Task+0xe>
	}

	// Reset the TASK_INDEX location
	SCH_tasks_G[current_tasks - 1].pTask = 0x0000;
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <SCH_Delete_Task+0x16c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	4920      	ldr	r1, [pc, #128]	; (800140c <SCH_Delete_Task+0x168>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_tasks - 1].Delay = 0;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <SCH_Delete_Task+0x16c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	491b      	ldr	r1, [pc, #108]	; (800140c <SCH_Delete_Task+0x168>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3304      	adds	r3, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_tasks - 1].Period = 0;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <SCH_Delete_Task+0x16c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	4915      	ldr	r1, [pc, #84]	; (800140c <SCH_Delete_Task+0x168>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	3308      	adds	r3, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_tasks - 1].RunMe = 0;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <SCH_Delete_Task+0x16c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	490f      	ldr	r1, [pc, #60]	; (800140c <SCH_Delete_Task+0x168>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	330c      	adds	r3, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[current_tasks - 1].TaskID = 0;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <SCH_Delete_Task+0x16c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <SCH_Delete_Task+0x168>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3310      	adds	r3, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

	current_tasks--;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SCH_Delete_Task+0x16c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <SCH_Delete_Task+0x16c>)
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	200000e8 	.word	0x200000e8
 8001410:	20000078 	.word	0x20000078

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_MspInit+0x5c>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x5c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_MspInit+0x5c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_MspInit+0x60>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_MspInit+0x60>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d113      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201c      	movs	r0, #28
 80014a8:	f000 f9a1 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ac:	201c      	movs	r0, #28
 80014ae:	f000 f9ba 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f87f 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM2_IRQHandler+0x10>)
 8001516:	f000 ffcf 	bl	80024b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000a0 	.word	0x200000a0

08001524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001556:	f7ff ffe5 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f001 faf5 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fc6b 	bl	8000e38 <main>
  bx lr
 8001562:	4770      	bx	lr
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800156c:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 8001570:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001574:	2000040c 	.word	0x2000040c

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_Init+0x28>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_Init+0x28>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f923 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	200f      	movs	r0, #15
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff ff3c 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f93b 	bl	8001842 <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f903 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000038 	.word	0x20000038
 8001600:	20000040 	.word	0x20000040
 8001604:	2000003c 	.word	0x2000003c

08001608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x1c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x20>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_IncTick+0x20>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	20000040 	.word	0x20000040
 8001628:	20000408 	.word	0x20000408

0800162c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000408 	.word	0x20000408

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <__NVIC_EnableIRQ+0x34>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff90 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff2d 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff42 	bl	8001688 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff90 	bl	8001730 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5f 	bl	80016dc <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff35 	bl	80016a4 <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e148      	b.n	8001b02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001870:	2201      	movs	r2, #1
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8137 	bne.w	8001afc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4aa3      	ldr	r2, [pc, #652]	; (8001b20 <HAL_GPIO_Init+0x2c4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d05e      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 8001898:	4aa1      	ldr	r2, [pc, #644]	; (8001b20 <HAL_GPIO_Init+0x2c4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d875      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 800189e:	4aa1      	ldr	r2, [pc, #644]	; (8001b24 <HAL_GPIO_Init+0x2c8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d058      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018a4:	4a9f      	ldr	r2, [pc, #636]	; (8001b24 <HAL_GPIO_Init+0x2c8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d86f      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018aa:	4a9f      	ldr	r2, [pc, #636]	; (8001b28 <HAL_GPIO_Init+0x2cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d052      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018b0:	4a9d      	ldr	r2, [pc, #628]	; (8001b28 <HAL_GPIO_Init+0x2cc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d869      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018b6:	4a9d      	ldr	r2, [pc, #628]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d04c      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018bc:	4a9b      	ldr	r2, [pc, #620]	; (8001b2c <HAL_GPIO_Init+0x2d0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d863      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018c2:	4a9b      	ldr	r2, [pc, #620]	; (8001b30 <HAL_GPIO_Init+0x2d4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d046      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
 80018c8:	4a99      	ldr	r2, [pc, #612]	; (8001b30 <HAL_GPIO_Init+0x2d4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d85d      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d82a      	bhi.n	8001928 <HAL_GPIO_Init+0xcc>
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d859      	bhi.n	800198a <HAL_GPIO_Init+0x12e>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_GPIO_Init+0x80>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001931 	.word	0x08001931
 80018e4:	08001943 	.word	0x08001943
 80018e8:	08001985 	.word	0x08001985
 80018ec:	0800198b 	.word	0x0800198b
 80018f0:	0800198b 	.word	0x0800198b
 80018f4:	0800198b 	.word	0x0800198b
 80018f8:	0800198b 	.word	0x0800198b
 80018fc:	0800198b 	.word	0x0800198b
 8001900:	0800198b 	.word	0x0800198b
 8001904:	0800198b 	.word	0x0800198b
 8001908:	0800198b 	.word	0x0800198b
 800190c:	0800198b 	.word	0x0800198b
 8001910:	0800198b 	.word	0x0800198b
 8001914:	0800198b 	.word	0x0800198b
 8001918:	0800198b 	.word	0x0800198b
 800191c:	0800198b 	.word	0x0800198b
 8001920:	08001939 	.word	0x08001939
 8001924:	0800194d 	.word	0x0800194d
 8001928:	4a82      	ldr	r2, [pc, #520]	; (8001b34 <HAL_GPIO_Init+0x2d8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800192e:	e02c      	b.n	800198a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e029      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	3304      	adds	r3, #4
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e024      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	3308      	adds	r3, #8
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e01f      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	330c      	adds	r3, #12
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e01a      	b.n	800198c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195e:	2304      	movs	r3, #4
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e013      	b.n	800198c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800196c:	2308      	movs	r3, #8
 800196e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	611a      	str	r2, [r3, #16]
          break;
 8001976:	e009      	b.n	800198c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001978:	2308      	movs	r3, #8
 800197a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	615a      	str	r2, [r3, #20]
          break;
 8001982:	e003      	b.n	800198c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x130>
          break;
 800198a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d801      	bhi.n	8001996 <HAL_GPIO_Init+0x13a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	e001      	b.n	800199a <HAL_GPIO_Init+0x13e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3304      	adds	r3, #4
 800199a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d802      	bhi.n	80019a8 <HAL_GPIO_Init+0x14c>
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x152>
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3b08      	subs	r3, #8
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	210f      	movs	r1, #15
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8090 	beq.w	8001afc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019dc:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x2dc>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <HAL_GPIO_Init+0x2dc>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_GPIO_Init+0x2dc>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f4:	4a51      	ldr	r2, [pc, #324]	; (8001b3c <HAL_GPIO_Init+0x2e0>)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2e4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1e0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1d8>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a34:	2303      	movs	r3, #3
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4e:	493b      	ldr	r1, [pc, #236]	; (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4937      	ldr	r1, [pc, #220]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4933      	ldr	r1, [pc, #204]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	492d      	ldr	r1, [pc, #180]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4929      	ldr	r1, [pc, #164]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	4923      	ldr	r1, [pc, #140]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	491f      	ldr	r1, [pc, #124]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	4919      	ldr	r1, [pc, #100]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4915      	ldr	r1, [pc, #84]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3301      	adds	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f47f aeaf 	bne.w	8001870 <HAL_GPIO_Init+0x14>
  }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	372c      	adds	r7, #44	; 0x2c
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	041a      	lsls	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e26c      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8087 	beq.w	8001cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd0:	4b92      	ldr	r3, [pc, #584]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d00c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bdc:	4b8f      	ldr	r3, [pc, #572]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d112      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5e>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d10b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d06c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x12c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d168      	bne.n	8001cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e246      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x76>
 8001c18:	4b80      	ldr	r3, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a7f      	ldr	r2, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e02e      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7a      	ldr	r2, [pc, #488]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a77      	ldr	r2, [pc, #476]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0xbc>
 8001c52:	4b72      	ldr	r3, [pc, #456]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a71      	ldr	r2, [pc, #452]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fcce 	bl	800162c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fcca 	bl	800162c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1fa      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xe4>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fcba 	bl	800162c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fcb6 	bl	800162c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1e6      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x10c>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cf6:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x18c>
 8001d02:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x176>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e1ba      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4939      	ldr	r1, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fc6f 	bl	800162c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff fc6b 	bl	800162c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e19b      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4927      	ldr	r1, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc4e 	bl	800162c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff fc4a 	bl	800162c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e17a      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03a      	beq.n	8001e34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d019      	beq.n	8001dfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff fc2e 	bl	800162c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fc2a 	bl	800162c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e15a      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f000 faa6 	bl	8002344 <RCC_Delay>
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc14 	bl	800162c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e06:	e00f      	b.n	8001e28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc10 	bl	800162c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d908      	bls.n	8001e28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e140      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	42420000 	.word	0x42420000
 8001e24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b9e      	ldr	r3, [pc, #632]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e9      	bne.n	8001e08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a6 	beq.w	8001f8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b97      	ldr	r3, [pc, #604]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b94      	ldr	r3, [pc, #592]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a93      	ldr	r2, [pc, #588]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a8a      	ldr	r2, [pc, #552]	; (80020a8 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fbd1 	bl	800162c <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8e:	f7ff fbcd 	bl	800162c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b64      	cmp	r3, #100	; 0x64
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0fd      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	4b81      	ldr	r3, [pc, #516]	; (80020a8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x312>
 8001eb4:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a7a      	ldr	r2, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e02d      	b.n	8001f1e <HAL_RCC_OscConfig+0x36e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x334>
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a75      	ldr	r2, [pc, #468]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a72      	ldr	r2, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	e01c      	b.n	8001f1e <HAL_RCC_OscConfig+0x36e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x356>
 8001eec:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6c      	ldr	r2, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x36e>
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a63      	ldr	r2, [pc, #396]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb81 	bl	800162c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb7d 	bl	800162c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0ab      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ee      	beq.n	8001f2e <HAL_RCC_OscConfig+0x37e>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb6b 	bl	800162c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb67 	bl	800162c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e095      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b48      	ldr	r3, [pc, #288]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8081 	beq.w	800209a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f98:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d061      	beq.n	8002068 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d146      	bne.n	800203a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_OscConfig+0x4fc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb3b 	bl	800162c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fb37 	bl	800162c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e067      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	492d      	ldr	r1, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a19      	ldr	r1, [r3, #32]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	430b      	orrs	r3, r1
 8002006:	4927      	ldr	r1, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x4fc>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fb0b 	bl	800162c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fb07 	bl	800162c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e037      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x46a>
 8002038:	e02f      	b.n	800209a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_RCC_OscConfig+0x4fc>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff faf4 	bl	800162c <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff faf0 	bl	800162c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e020      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x498>
 8002066:	e018      	b.n	800209a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e013      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42420060 	.word	0x42420060

080020b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d0      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 0207 	bic.w	r2, r3, #7
 80020da:	4965      	ldr	r1, [pc, #404]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002116:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800212e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	494d      	ldr	r1, [pc, #308]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d040      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e073      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06b      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4936      	ldr	r1, [pc, #216]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff fa44 	bl	800162c <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff fa40 	bl	800162c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e053      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d210      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0207 	bic.w	r2, r3, #7
 80021e6:	4922      	ldr	r1, [pc, #136]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e032      	b.n	8002266 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4916      	ldr	r1, [pc, #88]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223e:	f000 f821 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1cc>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1d0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f9a2 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	08002bc8 	.word	0x08002bc8
 800227c:	20000038 	.word	0x20000038
 8002280:	2000003c 	.word	0x2000003c

08002284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	b490      	push	{r4, r7}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb0>)
 800228c:	1d3c      	adds	r4, r7, #4
 800228e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002294:	f240 2301 	movw	r3, #513	; 0x201
 8002298:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x40>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x46>
 80022c2:	e02d      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	623b      	str	r3, [r7, #32]
      break;
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	0c9b      	lsrs	r3, r3, #18
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d6:	4413      	add	r3, r2
 80022d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c5b      	lsrs	r3, r3, #17
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f6:	4413      	add	r3, r2
 80022f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	fb02 f203 	mul.w	r2, r2, r3
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	e004      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	623b      	str	r3, [r7, #32]
      break;
 800231e:	e002      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002322:	623b      	str	r3, [r7, #32]
      break;
 8002324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002326:	6a3b      	ldr	r3, [r7, #32]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc90      	pop	{r4, r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	08002bb8 	.word	0x08002bb8
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	003d0900 	.word	0x003d0900

08002344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <RCC_Delay+0x34>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <RCC_Delay+0x38>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0a5b      	lsrs	r3, r3, #9
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002360:	bf00      	nop
  }
  while (Delay --);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f9      	bne.n	8002360 <RCC_Delay+0x1c>
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20000038 	.word	0x20000038
 800237c:	10624dd3 	.word	0x10624dd3

08002380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e041      	b.n	8002416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff f866 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 fa6a 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e035      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x4e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d004      	beq.n	800246e <HAL_TIM_Base_Start_IT+0x4e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <HAL_TIM_Base_Start_IT+0x94>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d111      	bne.n	8002492 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d010      	beq.n	80024a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002490:	e007      	b.n	80024a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400

080024b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0202 	mvn.w	r2, #2
 80024e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9b1 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9a4 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f9b3 	bl	8002874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b04      	cmp	r3, #4
 8002520:	d122      	bne.n	8002568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b04      	cmp	r3, #4
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0204 	mvn.w	r2, #4
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f987 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f97a 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f989 	bl	8002874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b08      	cmp	r3, #8
 8002574:	d122      	bne.n	80025bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b08      	cmp	r3, #8
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0208 	mvn.w	r2, #8
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2204      	movs	r2, #4
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f95d 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f950 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f95f 	bl	8002874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d122      	bne.n	8002610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d11b      	bne.n	8002610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0210 	mvn.w	r2, #16
 80025e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2208      	movs	r2, #8
 80025e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f933 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f926 	bl	8002850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f935 	bl	8002874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10e      	bne.n	800263c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0201 	mvn.w	r2, #1
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fd00 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b80      	cmp	r3, #128	; 0x80
 8002648:	d10e      	bne.n	8002668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d107      	bne.n	8002668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa67 	bl	8002b36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d10e      	bne.n	8002694 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d107      	bne.n	8002694 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8f9 	bl	8002886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d10e      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d107      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0220 	mvn.w	r2, #32
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa32 	bl	8002b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_ConfigClockSource+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0b3      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x180>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002718:	d03e      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0xd0>
 800271a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271e:	f200 8087 	bhi.w	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	f000 8085 	beq.w	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	d87f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002730:	2b70      	cmp	r3, #112	; 0x70
 8002732:	d01a      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xa2>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d87b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002738:	2b60      	cmp	r3, #96	; 0x60
 800273a:	d050      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x116>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d877      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002740:	2b50      	cmp	r3, #80	; 0x50
 8002742:	d03c      	beq.n	80027be <HAL_TIM_ConfigClockSource+0xf6>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d873      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d058      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x136>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d86f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b30      	cmp	r3, #48	; 0x30
 8002752:	d064      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x156>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d86b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002758:	2b20      	cmp	r3, #32
 800275a:	d060      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x156>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d867      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x156>
 8002764:	2b10      	cmp	r3, #16
 8002766:	d05a      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002768:	e062      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f000 f95c 	bl	8002a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800278c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	609a      	str	r2, [r3, #8]
      break;
 8002796:	e04e      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f000 f945 	bl	8002a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ba:	609a      	str	r2, [r3, #8]
      break;
 80027bc:	e03b      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 f8bc 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2150      	movs	r1, #80	; 0x50
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f913 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027dc:	e02b      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8da 	bl	80029a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2160      	movs	r1, #96	; 0x60
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f903 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027fc:	e01b      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f000 f89c 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2140      	movs	r1, #64	; 0x40
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8f3 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 800281c:	e00b      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f000 f8ea 	bl	8002a02 <TIM_ITRx_SetConfig>
        break;
 800282e:	e002      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <TIM_Base_SetConfig+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0x28>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x28>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <TIM_Base_SetConfig+0xac>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <TIM_Base_SetConfig+0xa8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <TIM_Base_SetConfig+0xac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <TIM_Base_SetConfig+0xa8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	615a      	str	r2, [r3, #20]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400

08002948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 030a 	bic.w	r3, r3, #10
 8002984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 0210 	bic.w	r2, r3, #16
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	031b      	lsls	r3, r3, #12
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f043 0307 	orr.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e041      	b.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10c      	bne.n	8002afe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400

08002b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	2600      	movs	r6, #0
 8002b4c:	4d0c      	ldr	r5, [pc, #48]	; (8002b80 <__libc_init_array+0x38>)
 8002b4e:	4c0d      	ldr	r4, [pc, #52]	; (8002b84 <__libc_init_array+0x3c>)
 8002b50:	1b64      	subs	r4, r4, r5
 8002b52:	10a4      	asrs	r4, r4, #2
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	f000 f822 	bl	8002ba0 <_init>
 8002b5c:	2600      	movs	r6, #0
 8002b5e:	4d0a      	ldr	r5, [pc, #40]	; (8002b88 <__libc_init_array+0x40>)
 8002b60:	4c0a      	ldr	r4, [pc, #40]	; (8002b8c <__libc_init_array+0x44>)
 8002b62:	1b64      	subs	r4, r4, r5
 8002b64:	10a4      	asrs	r4, r4, #2
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	08002bd8 	.word	0x08002bd8
 8002b84:	08002bd8 	.word	0x08002bd8
 8002b88:	08002bd8 	.word	0x08002bd8
 8002b8c:	08002bdc 	.word	0x08002bdc

08002b90 <memset>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	4402      	add	r2, r0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d100      	bne.n	8002b9a <memset+0xa>
 8002b98:	4770      	bx	lr
 8002b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9e:	e7f9      	b.n	8002b94 <memset+0x4>

08002ba0 <_init>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr

08002bac <_fini>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr
